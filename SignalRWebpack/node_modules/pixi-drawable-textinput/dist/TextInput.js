"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var PIXI = require("pixi.js");
var InputOption_1 = require("./TextInput/InputOption");
exports.InputOption = InputOption_1.InputOption;
var InputCursorStyle_1 = require("./TextInput/InputCursorStyle");
exports.InputCursorStyle = InputCursorStyle_1.InputCursorStyle;
var InputFontStyle_1 = require("./TextInput/InputFontStyle");
exports.InputFontStyle = InputFontStyle_1.InputFontStyle;
var InputColor_1 = require("./TextInput/InputColor");
exports.InputColor = InputColor_1.InputColor;
var TextInput = (function (_super) {
    __extends(TextInput, _super);
    function TextInput(options) {
        var _this = _super.call(this) || this;
        _this.isFocus = false;
        _this.cursorWorldPosition = { x: 0, y: 0 };
        _this.blindStatus = true;
        _this.lastComponentHeight = 0;
        _this.options = options;
        _this.textComponent = new PIXI.Text(_this.GenerateValueDisplay());
        _this.cursorPosition = _this.options.value.length;
        _this.backgroundComponent = new PIXI.Graphics();
        _this.backgroundComponentFocus = new PIXI.Graphics();
        _this.cursorComponentBlind = new PIXI.Graphics();
        _this.cursorComponentLow = new PIXI.Graphics();
        _this.redraw();
        _this.backgroundComponentFocus.visible = false;
        _this.backgroundComponent.interactive = true;
        _this.backgroundComponent.buttonMode = true;
        _this.backgroundComponent.on("pointerup", _this.focus.bind(_this));
        _this.backgroundComponent.on("pointerupoutside", _this.blur.bind(_this));
        _this.addChild(_this.backgroundComponent);
        _this.addChild(_this.backgroundComponentFocus);
        _this.addChild(_this.textComponent);
        _this.addChild(_this.cursorComponentBlind);
        _this.addChild(_this.cursorComponentLow);
        return _this;
    }
    TextInput.prototype.GenerateValueDisplay = function () {
        var display = this.options.value == "" ? this.options.placeHolder : this.options.value;
        var style = new PIXI.TextStyle(this.options.style);
        var textMesure = PIXI.TextMetrics.measureText(display, style, false).width;
        if (textMesure > this.options.width - 5) {
            var displayWord = display.split(" ");
            display = "";
            var actualSentence = "";
            var actualSentenceSize = 0;
            for (var wordKey in displayWord) {
                var word = displayWord[wordKey];
                var wordSize = PIXI.TextMetrics.measureText(word.concat(" "), style, false).width;
                if (actualSentenceSize + wordSize > this.options.width - 5) {
                    display += actualSentence.concat("\n");
                    actualSentence = "";
                    actualSentenceSize = 0;
                }
                actualSentence += word.concat(" ");
                actualSentenceSize += wordSize;
            }
            display += actualSentence;
        }
        return display;
    };
    TextInput.prototype.DrawCursor = function () {
        this.cursorComponentBlind.cacheAsBitmap = false;
        this.cursorComponentBlind.clear();
        var style = this.options.cursorStyle;
        this.cursorComponentBlind
            .beginFill(style.colorBlind.color, style.colorBlind.alpha)
            .drawRect(0, 0, style.width, this.options.style.fontSize + 4)
            .endFill();
        this.cursorComponentBlind.cacheAsBitmap = true;
        this.cursorComponentBlind.visible = false;
        this.cursorComponentBlind.pivot.y = (this.options.style.fontSize + 4) / 2;
        this.cursorComponentLow.cacheAsBitmap = false;
        this.cursorComponentLow.clear();
        this.cursorComponentLow
            .beginFill(style.colorLow.color, style.colorLow.alpha)
            .drawRect(0, 0, style.width, this.options.style.fontSize + 4)
            .endFill();
        this.cursorComponentLow.visible = false;
        this.cursorComponentLow.cacheAsBitmap = true;
        this.cursorComponentLow.pivot.y = (this.options.style.fontSize + 4) / 2;
    };
    TextInput.prototype.DrawBackground = function () {
        if (this.options.multiLine) {
            this.lastComponentHeight = this.textComponent.height + this.options.paddingHeight;
            if (this.options.maxHeight && this.lastComponentHeight > this.options.maxHeight) {
                this.lastComponentHeight = this.options.maxHeight;
            }
        }
        else {
            this.lastComponentHeight = this.options.height;
        }
        this.backgroundComponent.cacheAsBitmap = false;
        this.backgroundComponent.clear();
        var option = this.options;
        this.backgroundComponent
            .lineStyle(option.borderWidth, option.borderColor.color, option.borderColor.alpha)
            .beginFill(option.backgroundColor.color, option.backgroundColor.alpha)
            .drawRoundedRect(0, 0, option.width, this.lastComponentHeight, option.roundedBorder)
            .endFill();
        this.backgroundComponent.cacheAsBitmap = true;
        this.backgroundComponentFocus.cacheAsBitmap = false;
        this.backgroundComponentFocus.clear();
        this.backgroundComponentFocus
            .lineStyle(option.borderWidth, option.borderColorFocus.color, option.borderColorFocus.alpha)
            .beginFill(option.backgroundColorFocus.color, option.backgroundColorFocus.alpha)
            .drawRoundedRect(0, 0, option.width, this.lastComponentHeight, option.roundedBorder)
            .endFill();
        this.backgroundComponentFocus.cacheAsBitmap = true;
    };
    TextInput.prototype.DrawText = function () {
        var option = this.options;
        if (option.multiLine) {
            this.textComponent.x = 5;
            this.textComponent.y = 5;
        }
        else {
            this.textComponent.x = 5;
            this.textComponent.anchor.y = 0.5;
            this.textComponent.y = option.height / 2;
        }
        this.textComponent.style = option.style;
    };
    TextInput.prototype.redraw = function () {
        this.DrawText();
        this.DrawBackground();
        if (this.options.enableCursor) {
            this.DrawCursor();
        }
    };
    TextInput.prototype.OnKeyDown = function (event) {
        if (!this.isFocus) {
            return;
        }
        event.preventDefault();
        if (event.keyCode === 27) {
            this.blur();
        }
        var lastText = this.textComponent.text;
        if (event.keyCode == 8 && lastText.length > 0) {
            this.fireTextChange(lastText, lastText.slice(0, this.cursorPosition - 1) + lastText.slice(this.cursorPosition), this.cursorPosition - 1);
            return;
        }
        if (event.keyCode == 46) {
            this.fireTextChange(lastText, "", 0);
            return;
        }
        if (event.keyCode >= 37 && event.keyCode <= 40 && this.options.enableCursor) {
            this.useKeyboardPosition(event.keyCode);
            return;
        }
        if (event.key.length > 1) {
            return;
        }
        if (this.options.maxLength > -1 && lastText.length > this.options.maxLength) {
            return;
        }
        var newText = lastText.slice(0, this.cursorPosition) + event.key + lastText.slice(this.cursorPosition);
        this.textComponent.text = newText;
        var newComponentSize = this.textComponent.width;
        this.textComponent.text = lastText;
        if (newComponentSize > this.options.width - this.options.style.fontSize) {
            if (!this.options.multiLine) {
                return;
            }
            var breakPosition = lastText.lastIndexOf(" ");
            if (this.options.wordWrapType == "break-all" || breakPosition == -1) {
                newText = this.addStringIntoStringAt(lastText, this.cursorPosition, "\n".concat(event.key));
                this.cursorPosition += 1;
            }
            else {
                newText = this.replaceCharIntoStringAt(lastText, breakPosition, "\n");
                newText = this.addStringIntoStringAt(newText, this.cursorPosition, event.key);
            }
        }
        if (this.options.onlyNumber) {
            if (!isNaN(Number(newText))) {
                var value = parseFloat(newText);
                if (value < this.options.min || value > this.options.max) {
                    return;
                }
            }
            else {
                return;
            }
        }
        this.fireTextChange(lastText, newText, this.cursorPosition + 1);
    };
    TextInput.prototype.addStringIntoStringAt = function (key, index, value) {
        return key.slice(0, index).concat(value).concat(key.slice(index));
    };
    TextInput.prototype.replaceCharIntoStringAt = function (key, index, value) {
        return key.slice(0, index).concat(value).concat(key.slice(index + 1));
    };
    TextInput.prototype.useKeyboardPosition = function (keyCode) {
        switch (keyCode) {
            case 37:
                this.changeCursorPosition(this.cursorPosition - 1);
                break;
            case 38:
                this.changeCursorPosition(this.cursorPosition - this.calculateCursorPosition().positionInLine);
                break;
            case 39:
                this.changeCursorPosition(this.cursorPosition + 1);
                break;
            case 40:
                this.changeCursorPosition(this.cursorPosition + this.calculateCursorPosition().positionInLine);
                break;
        }
    };
    TextInput.prototype.changeCursorPosition = function (position) {
        if (!this.options.enableCursor) {
            return false;
        }
        if (position < 0) {
            return false;
        }
        if (position > this.textComponent.text.length) {
            return false;
        }
        this.cursorPosition = position;
        this.cursorWorldPosition = this.calculateCursorLocation();
        this.cursorTimerEvent();
        return true;
    };
    TextInput.prototype.fireTextChange = function (lastValue, newValue, cursorPosition) {
        this.options.value = newValue;
        this.textComponent.text = newValue;
        this.cursorPosition = cursorPosition;
        if (this.options.onChange != undefined) {
            this.options.onChange(this.options.onlyNumber ? parseFloat(this.textComponent.text) : this.textComponent.text);
        }
        if (this.textComponent.height - this.lastComponentHeight > 0) {
            this.redraw();
        }
        this.changeCursorPosition(cursorPosition);
    };
    TextInput.prototype.calculateValueMetrics = function () {
        return PIXI.TextMetrics.measureText(this.textComponent.text, this.textComponent.style, false);
    };
    TextInput.prototype.calculateCursorPosition = function () {
        var metrix = this.calculateValueMetrics();
        var cursorLine = 0;
        var positionInLine = 0;
        var afterCursorLine = "";
        var actualLocationLoop = 0;
        var line = metrix.text.split("\n");
        for (var value in line) {
            var lastLocation = actualLocationLoop;
            var e = line[value];
            actualLocationLoop += e.length;
            if (this.cursorPosition <= actualLocationLoop + cursorLine) {
                positionInLine = this.cursorPosition - lastLocation - cursorLine;
                afterCursorLine = e.substr(0, positionInLine);
                break;
            }
            cursorLine += 1;
        }
        return { metrix: metrix, line: cursorLine, positionInLine: positionInLine, afterCursorLine: afterCursorLine };
    };
    TextInput.prototype.calculateCursorLocation = function () {
        var position = this.calculateCursorPosition();
        var y = 0;
        if (position.line == 0) {
            y = this.options.height / 2;
        }
        else {
            y = (position.line * (position.metrix.lineHeight)) + this.options.height / 2;
        }
        var x = PIXI.TextMetrics.measureText(position.afterCursorLine, this.textComponent.style, false).width
            + this.options.cursorStyle.distance;
        return { x: x, y: y };
    };
    TextInput.prototype.displayCursor = function (visible, blind, position) {
        this.cursorComponentBlind.visible = visible ? !blind : false;
        this.cursorComponentLow.visible = visible ? blind : false;
        this.cursorComponentBlind.x = position.x;
        this.cursorComponentBlind.y = position.y;
        this.cursorComponentLow.x = position.x;
        this.cursorComponentLow.y = position.y;
    };
    TextInput.prototype.cursorTimerEvent = function () {
        this.blindStatus = !this.blindStatus;
        this.displayCursor(true, this.blindStatus, this.cursorWorldPosition);
    };
    TextInput.prototype.displayBackground = function (focus) {
        this.backgroundComponent.visible = !focus;
        this.backgroundComponentFocus.visible = focus;
    };
    TextInput.prototype.AddEvent = function () {
        this.keyDownEventRef = this.OnKeyDown.bind(this);
        this.blurEventRef = this.blur.bind(this);
        window.addEventListener("keydown", this.keyDownEventRef);
        window.addEventListener("mousedown", this.blurEventRef);
        if (this.options.enableCursor) {
            this.interval = window.setInterval(this.cursorTimerEvent.bind(this), this.options.cursorStyle.speedSwap);
        }
    };
    TextInput.prototype.RemoveEvent = function () {
        window.removeEventListener("keydown", this.keyDownEventRef);
        window.removeEventListener("mousedown", this.blurEventRef);
        if (this.options.enableCursor) {
            window.clearInterval(this.interval);
        }
    };
    TextInput.prototype.focus = function () {
        if (this.isFocus) {
            return;
        }
        this.displayBackground(true);
        this.AddEvent();
        this.isFocus = true;
        this.textComponent.text = this.options.value;
        this.changeCursorPosition(this.cursorPosition);
        if (this.options.onFocus != undefined) {
            this.options.onFocus();
        }
    };
    TextInput.prototype.blur = function () {
        if (!this.isFocus) {
            return;
        }
        this.displayBackground(false);
        this.RemoveEvent();
        this.displayCursor(false, false, { x: 0, y: 0 });
        this.textComponent.text = this.GenerateValueDisplay();
        this.isFocus = false;
        if (this.options.onBlur != undefined) {
            this.options.onBlur();
        }
    };
    return TextInput;
}(PIXI.Container));
exports.TextInput = TextInput;
exports.default = TextInput;
